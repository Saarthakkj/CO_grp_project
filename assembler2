reg_lst = ["R0", "R1", "R2", "R3", "R4", "R5", "R6"]


# --------------------------returns registers address-------------------
def register(r):
    if(r=="R0"):
        return "000"
    elif(r=="R1"):
        return "001"
    elif(r=="R2"):
        return "010"
    elif(r=="R3"):
        return "011"
    elif(r=="R4"):
        return "100"
    elif(r=="R5"):
        return "101"
    elif(r=="R6"):
        return "110"

# --------------------------------------------------return variable address----------------------------------------------
def variable(var,var_dic):
    for i in var_dic.keys():
        if(i==var):
            return var_dic[var]


# ----------------------------------integer_to_binary_with_padding(used in satwik's funtion)----------------------
def integer_to_binary_with_padding(value):
    binary_number=format(int(value),'b')
    return str(binary_number).rjust(7,'0')



# --------------------------taking_input_in_label_dictionary with value as line number(used in satwik's function)----------------
def taking_input_in_label_dictionary(key,label_name_dictionary,data):
    k=0
    for i in data:
        k+=1
        if((i[0])[:len(key)]==key):
            value=integer_to_binary_with_padding(k)
    
    label_name_dictionary[key]=value


# ----------------------extra function(used in satwik's function IGNORE IT) ----------------------------------------------------------------------
def key(instruction):
    all_isa=["add","sub","mov","ld","st","mul","div","rs","ls","xor","or","and","not","cmp","jmp","jlt","jgt","je","hlt"]
    for i in range(1,len(instruction)):
        if(instruction[i] not in all_isa):
            key=i
    return key


# -------------------------------------ISA(called function)----------------
def addition(r1, r2, r3):
    if r1 in reg_lst and r2 in reg_lst and r3 in reg_lst:
        return "00000_00_"+register(r1)+"_"+register(r2)+"_"+register(r3)

def subtraction(r1, r2, r3):
    if r1 in reg_lst and r2 in reg_lst and r3 in reg_lst:
        return "00001_00_"+register(r1)+"_"+register(r2)+"_"+register(r3)

def move_immediate(r, imm_val):
    print("imm value",imm_val[1:])
    print("imm_val binary",integer_to_binary_with_padding(imm_val[1:]))
    
    if r in reg_lst:
        return "00010_0_"+register(r)+"_"+integer_to_binary_with_padding(imm_val[1:])

def move_register(r1, r2):
    if r1 in reg_lst and r2 in reg_lst:
        return "00011_00000_"+register(r1)+"_"+register(r2)

def load(i, var_dic):
    ans="00100_0_"
    #Stores opcode(5 bit) data from reg1 to mem_addr(7 bits) + 1 unused bit
    #print("data is: ",i)
    # print("load ",i[1])
    ans+=register(i[1])
    ans+="_"   
    #print("ans is: ",ans)
    #print("vardic: ",var_dic)
    for j in var_dic:
        '''print("i[2] is : ",i[2])
        print("j is:",j)'''
        if j.strip()==i[2].strip():
            ans+=var_dic[j]
            #print("vardic value: ",var_dic[j])
    return ans

def store(i,var_dic):
    ans="00101_0_"
    #Stores opcode(5 bit) data from reg1 to mem_addr(7 bits) + 1 unused bit
    #print("data is: ",i)
    ans+=register(i[1])
    ans+="_"   
    #print("ans is: ",ans)
    #print("vardic: ",var_dic)
    for j in var_dic:
        '''print("i[2] is : ",i[2])
        print("j is:",j)'''
        if j.strip()==i[2].strip():
            ans+=var_dic[j]
            #print("vardic value: ",var_dic[j])
    return ans
